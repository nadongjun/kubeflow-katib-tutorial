"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loginByKeycloak = void 0;
const axios_1 = __importDefault(require("axios"));
const qrcode_terminal_1 = __importDefault(require("qrcode-terminal"));
const qs_1 = __importDefault(require("qs"));
const shelljs_1 = __importDefault(require("shelljs"));
const getUserCodeAndDeviceCode = async () => {
    try {
        const { data } = await axios_1.default({
            method: 'post',
            url: 'https://keycloak.jiwai.win/auth/realms/UniHeart/protocol/openid-connect/auth/device',
            // @ts-ignore
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            data: qs_1.default.stringify({
                client_id: 'demoapp',
            }),
        });
        return data;
    }
    catch (ex) {
        console.error(ex);
        throw ex;
    }
};
const openBrowser = async ({ verification_uri, user_code, verification_uri_complete }) => {
    console.log('请打开浏览器并浏览至： ', verification_uri, ' , 然后在打开的页面中输入 ', user_code);
    qrcode_terminal_1.default.generate(verification_uri_complete, { small: true }, console.log);
    shelljs_1.default.exec(`open ${verification_uri_complete}`);
};
const pollToken = async ({ device_code }) => {
    var _a, _b, _c, _d, _e;
    try {
        const { data } = await axios_1.default({
            method: 'post',
            url: 'https://keycloak.jiwai.win/auth/realms/UniHeart/protocol/openid-connect/token',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            data: qs_1.default.stringify({
                grant_type: 'urn:ietf:params:oauth:grant-type:device_code',
                client_id: 'demoapp',
                device_code,
            }),
        });
        console.log('本次查询令牌的结果是： ', data);
        return data;
    }
    catch (ex) {
        if (ex.response && ex.response.status === 400) {
            const error = (_b = (_a = ex.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error;
            const getErrorMessage = (deviceCode) => { var _a, _b; return '查询无效，因为 ' + ((_b = (_a = ex.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error_description) + '\n 传入的参数是： ' + JSON.stringify({ device_code: deviceCode }); };
            if (error === 'authorization_pending') {
                console.log((_c = ex.response) === null || _c === void 0 ? void 0 : _c.data, ' 未得到用户已授权的响应。 等待 5 秒，再查……');
                await sleep(5);
                return await pollToken({ device_code });
            }
            if (error === 'slow_down') {
                console.log((_d = ex.response) === null || _d === void 0 ? void 0 : _d.data, ' 未得到用户已授权的响应。 等待 10 秒，再查……');
                await sleep(10);
                return await pollToken({ device_code });
            }
            if (error === 'invalid_grant') {
                const errorMessage = getErrorMessage(device_code);
                console.error(errorMessage);
                throw new Error(errorMessage);
            }
            if (error === 'expired_token') {
                console.error('超时了！本次登录失败，请重新发起登录！\n传入的参数是： ', { device_code });
                throw new Error(`超时了！本次登录失败，请重新发起登录！
传入的参数： ${JSON.stringify({ device_code })}`);
            }
        }
        console.error((_e = ex.response) === null || _e === void 0 ? void 0 : _e.data);
        throw ex;
    }
};
const sleep = (seconds) => new Promise(resolve => setTimeout(resolve, seconds * 1000));
exports.loginByKeycloak = async () => {
    console.log('getting user code and device code...');
    const codes = await getUserCodeAndDeviceCode();
    console.log('codes = ', codes);
    await openBrowser(codes);
    console.log('\n\n\n\n等待输入授权码……');
    await sleep(10);
    console.log('开始查询登录结果……');
    const res = await pollToken(codes);
    console.log('最终轮询结果是： ', res);
    console.log('登录成功！');
};
