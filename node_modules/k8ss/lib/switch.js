"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.switchTo = void 0;
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const rimraf_1 = __importDefault(require("rimraf"));
exports.switchTo = (args) => {
    console.log(`switching to --cluster=${args.cluster} --namespace=${args.namespace}...`);
    const { cluster, namespace } = args;
    if (cluster) {
        const source = path.resolve(os.homedir(), 'k8s-config');
        const sourceConfig = path.resolve(source, cluster, 'config');
        console.log('will copy ', sourceConfig);
        if (!fs_1.default.existsSync(sourceConfig)) {
            const errorMessage = '没有找到目标文件：' + sourceConfig;
            console.error(errorMessage);
            if (require.main !== module) {
                throw new Error(errorMessage);
            }
            else {
                process.exit(1);
            }
        }
        const kubeFolder = path.resolve(os.homedir(), '.kube');
        const kubeBackupFolder = path.resolve(os.homedir(), '.kube.bak');
        if (fs_1.default.existsSync(kubeFolder)) {
            if (fs_1.default.existsSync(kubeBackupFolder)) {
                rimraf_1.default.sync(kubeBackupFolder);
                console.log('deleted ', kubeBackupFolder);
                fs_1.default.mkdirSync(kubeBackupFolder, { recursive: true });
            }
            else {
                fs_1.default.mkdirSync(kubeBackupFolder, { recursive: true });
            }
            const oldConfig = path.resolve(kubeFolder, 'config');
            if (fs_1.default.existsSync(oldConfig)) {
                fs_1.default.renameSync(oldConfig, path.resolve(kubeBackupFolder, 'config'));
            }
        }
        try {
            fs_1.default.mkdirSync(kubeFolder, { recursive: true });
            console.log('created ', kubeFolder);
        }
        catch (ex) {
            console.error(`creating ${kubeFolder} error, but it doesn't matter. `, ex);
            console.log('will continue next steps...');
        }
        const targetConfig = path.resolve(kubeFolder, 'config');
        fs_1.default.copyFileSync(sourceConfig, targetConfig);
        console.log('copied from ', sourceConfig, ' to ', targetConfig);
        console.log('file = ', fs_1.default.readFileSync(targetConfig));
    }
    console.log('will switching context...', namespace);
    try {
        let currentContext = '';
        currentContext = child_process_1.execSync('kubectl config current-context').toString('utf-8');
        console.log('current context = ', currentContext);
        const output = child_process_1.execSync('kubectl config set-context ' + currentContext.replace('\n', '') + ' --namespace=' + namespace);
        console.log('switched result: ');
        console.log(output.toString('utf-8'));
    }
    catch (ex) {
        console.error(`switching to --cluster=${args.cluster} --namespace=${args.namespace} failed! `, ex);
        if (require.main === module) {
            process.exit(1);
        }
        else {
            throw ex;
        }
    }
};
